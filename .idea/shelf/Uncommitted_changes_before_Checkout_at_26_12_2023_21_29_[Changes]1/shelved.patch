Index: src/main/java/com/cgvsu/render_scene/GraphicConveyor.java
===================================================================
diff --git a/src/main/java/com/cgvsu/render_scene/GraphicConveyor.java b/src/main/java/com/cgvsu/render_scene/GraphicConveyor.java
deleted file mode 100644
--- a/src/main/java/com/cgvsu/render_scene/GraphicConveyor.java	
+++ /dev/null	
@@ -1,66 +0,0 @@
-package com.cgvsu.render_scene;
-import javax.vecmath.*;
-
-public class GraphicConveyor {
-
-    public static Matrix4f rotateScaleTranslate() {
-        float[] matrix = new float[]{
-                1, 0, 0, 0,
-                0, 1, 0, 0,
-                0, 0, 1, 0,
-                0, 0, 0, 1};
-        return new Matrix4f(matrix);
-    }
-
-    public static Matrix4f lookAt(Vector3f eye, Vector3f target) {
-        return lookAt(eye, target, new Vector3f(0F, 1.0F, 0F));
-    }
-
-    public static Matrix4f lookAt(Vector3f eye, Vector3f target, Vector3f up) {
-        Vector3f resultX = new Vector3f();
-        Vector3f resultY = new Vector3f();
-        Vector3f resultZ = new Vector3f();
-
-        resultZ.sub(target, eye);
-        resultX.cross(up, resultZ);
-        resultY.cross(resultZ, resultX);
-
-        resultX.normalize();
-        resultY.normalize();
-        resultZ.normalize();
-
-        float[] matrix = new float[]{
-                resultX.x, resultY.x, resultZ.x, 0,
-                resultX.y, resultY.y, resultZ.y, 0,
-                resultX.z, resultY.z, resultZ.z, 0,
-                -resultX.dot(eye), -resultY.dot(eye), -resultZ.dot(eye), 1};
-        return new Matrix4f(matrix);
-    }
-
-    public static Matrix4f perspective(
-            final float fov,
-            final float aspectRatio,
-            final float nearPlane,
-            final float farPlane) {
-        Matrix4f result = new Matrix4f();
-        float tangentMinusOnDegree = (float) (1.0F / (Math.tan(fov * 0.5F)));
-        result.m00 = tangentMinusOnDegree / aspectRatio;
-        result.m11 = tangentMinusOnDegree;
-        result.m22 = (farPlane + nearPlane) / (farPlane - nearPlane);
-        result.m23 = 1.0F;
-        result.m32 = 2 * (nearPlane * farPlane) / (nearPlane - farPlane);
-        return result;
-    }
-
-    public static Vector3f multiplyMatrix4ByVector3(final Matrix4f matrix, final Vector3f vertex) {
-        final float x = (vertex.x * matrix.m00) + (vertex.y * matrix.m10) + (vertex.z * matrix.m20) + matrix.m30;
-        final float y = (vertex.x * matrix.m01) + (vertex.y * matrix.m11) + (vertex.z * matrix.m21) + matrix.m31;
-        final float z = (vertex.x * matrix.m02) + (vertex.y * matrix.m12) + (vertex.z * matrix.m22) + matrix.m32;
-        final float w = (vertex.x * matrix.m03) + (vertex.y * matrix.m13) + (vertex.z * matrix.m23) + matrix.m33;
-        return new Vector3f(x / w, y / w, z / w);
-    }
-
-    public static Point2f vertexToPoint(final Vector3f vertex, final int width, final int height) {
-        return new Point2f(vertex.x * width + width / 2.0F, -vertex.y * height + height / 2.0F);
-    }
-}
Index: src/main/java/com/cgvsu/math/Vector3f.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/cgvsu/math/Vector3f.java b/src/main/java/com/cgvsu/math/Vector3f.java
--- a/src/main/java/com/cgvsu/math/Vector3f.java	
+++ b/src/main/java/com/cgvsu/math/Vector3f.java	
@@ -2,9 +2,9 @@
 
 // Это заготовка для собственной библиотеки для работы с линейной алгеброй
 public class Vector3f {
-    protected float x;
-    protected float y;
-    protected float z;
+    public float x;
+    public float y;
+    public float z;
 
 
     public Vector3f(float x, float y, float z) {
Index: src/main/java/com/cgvsu/render_scene/GraphicsProcessor.java
===================================================================
diff --git a/src/main/java/com/cgvsu/render_scene/GraphicsProcessor.java b/src/main/java/com/cgvsu/render_scene/GraphicsProcessor.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/cgvsu/render_scene/GraphicsProcessor.java	
@@ -0,0 +1,136 @@
+package com.cgvsu.render_scene;
+
+import javax.vecmath.*;
+
+public class GraphicsProcessor {
+
+    public static Matrix4f createRotationScaleTranslationMatrix() {
+        float[] matrix = new float[]{
+                1, 0, 0, 0,
+                0, 1, 0, 0,
+                0, 0, 1, 0,
+                0, 0, 0, 1};
+        return new Matrix4f(matrix);
+    }
+
+    public static Matrix4f createLookAtMatrix(Vector3f eye, Vector3f target) {
+        return createLookAtMatrix(eye, target, new Vector3f(0F, 1.0F, 0F));
+    }
+
+    public static Matrix4f createLookAtMatrix(Vector3f eye, Vector3f target, Vector3f up) {
+        Vector3f resultX = new Vector3f();
+        Vector3f resultY = new Vector3f();
+        Vector3f resultZ = new Vector3f();
+
+        resultZ.sub(target, eye);
+        resultX.cross(up, resultZ);
+        resultY.cross(resultZ, resultX);
+
+        resultX.normalize();
+        resultY.normalize();
+        resultZ.normalize();
+
+        float[] matrix = new float[]{
+                resultX.x, resultY.x, resultZ.x, 0,
+                resultX.y, resultY.y, resultZ.y, 0,
+                resultX.z, resultY.z, resultZ.z, 0,
+                -resultX.dot(eye), -resultY.dot(eye), -resultZ.dot(eye), 1};
+        return new Matrix4f(matrix);
+    }
+
+    public static Matrix4f createPerspectiveMatrix(
+            final float fov,
+            final float aspectRatio,
+            final float nearPlane,
+            final float farPlane) {
+        Matrix4f result = new Matrix4f();
+        float tangentMinusOnDegree = (float) (1.0F / (Math.tan(fov * 0.5F)));
+        result.m00 = tangentMinusOnDegree / aspectRatio;
+        result.m11 = tangentMinusOnDegree;
+        result.m22 = (farPlane + nearPlane) / (farPlane - nearPlane);
+        result.m23 = 1.0F;
+        result.m32 = 2 * (nearPlane * farPlane) / (nearPlane - farPlane);
+        return result;
+    }
+
+    public static Vector3f multiplyMatrix4ByVector3(final Matrix4f matrix, final Vector3f vertex) {
+        final float x = (vertex.x * matrix.m00) + (vertex.y * matrix.m10) + (vertex.z * matrix.m20) + matrix.m30;
+        final float y = (vertex.x * matrix.m01) + (vertex.y * matrix.m11) + (vertex.z * matrix.m21) + matrix.m31;
+        final float z = (vertex.x * matrix.m02) + (vertex.y * matrix.m12) + (vertex.z * matrix.m22) + matrix.m32;
+        final float w = (vertex.x * matrix.m03) + (vertex.y * matrix.m13) + (vertex.z * matrix.m23) + matrix.m33;
+        return new Vector3f(x / w, y / w, z / w);
+    }
+
+    public static Point2f vertexToPoint(final Vector3f vertex, final int width, final int height) {
+        return new Point2f(vertex.x * width + width / 2.0F, -vertex.y * height + height / 2.0F);
+    }
+}
+
+/*
+package com.cgvsu.render_scene;
+import javax.vecmath.*;
+
+public class GraphicConveyor {
+
+    public static Matrix4f rotateScaleTranslate() {
+        float[] matrix = new float[]{
+                1, 0, 0, 0,
+                0, 1, 0, 0,
+                0, 0, 1, 0,
+                0, 0, 0, 1};
+        return new Matrix4f(matrix);
+    }
+
+    public static Matrix4f lookAt(Vector3f eye, Vector3f target) {
+        return lookAt(eye, target, new Vector3f(0F, 1.0F, 0F));
+    }
+
+    public static Matrix4f lookAt(Vector3f eye, Vector3f target, Vector3f up) {
+        Vector3f resultX = new Vector3f();
+        Vector3f resultY = new Vector3f();
+        Vector3f resultZ = new Vector3f();
+
+        resultZ.sub(target, eye);
+        resultX.cross(up, resultZ);
+        resultY.cross(resultZ, resultX);
+
+        resultX.normalize();
+        resultY.normalize();
+        resultZ.normalize();
+
+        float[] matrix = new float[]{
+                resultX.x, resultY.x, resultZ.x, 0,
+                resultX.y, resultY.y, resultZ.y, 0,
+                resultX.z, resultY.z, resultZ.z, 0,
+                -resultX.dot(eye), -resultY.dot(eye), -resultZ.dot(eye), 1};
+        return new Matrix4f(matrix);
+    }
+
+    public static Matrix4f perspective(
+            final float fov,
+            final float aspectRatio,
+            final float nearPlane,
+            final float farPlane) {
+        Matrix4f result = new Matrix4f();
+        float tangentMinusOnDegree = (float) (1.0F / (Math.tan(fov * 0.5F)));
+        result.m00 = tangentMinusOnDegree / aspectRatio;
+        result.m11 = tangentMinusOnDegree;
+        result.m22 = (farPlane + nearPlane) / (farPlane - nearPlane);
+        result.m23 = 1.0F;
+        result.m32 = 2 * (nearPlane * farPlane) / (nearPlane - farPlane);
+        return result;
+    }
+
+    public static Vector3f multiplyMatrix4ByVector3(final Matrix4f matrix, final Vector3f vertex) {
+        final float x = (vertex.x * matrix.m00) + (vertex.y * matrix.m10) + (vertex.z * matrix.m20) + matrix.m30;
+        final float y = (vertex.x * matrix.m01) + (vertex.y * matrix.m11) + (vertex.z * matrix.m21) + matrix.m31;
+        final float z = (vertex.x * matrix.m02) + (vertex.y * matrix.m12) + (vertex.z * matrix.m22) + matrix.m32;
+        final float w = (vertex.x * matrix.m03) + (vertex.y * matrix.m13) + (vertex.z * matrix.m23) + matrix.m33;
+        return new Vector3f(x / w, y / w, z / w);
+    }
+
+    public static Point2f vertexToPoint(final Vector3f vertex, final int width, final int height) {
+        return new Point2f(vertex.x * width + width / 2.0F, -vertex.y * height + height / 2.0F);
+    }
+}
+*/
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,9 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="ebbbc371-9c3e-484b-bf5c-a751008d4637" name="Changes" comment="3f, 2f add">
-      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+    <list default="true" id="ebbbc371-9c3e-484b-bf5c-a751008d4637" name="Changes" comment="add actions with vectors: sum, path from two points, etc">
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/cgvsu/render_scene/GraphicsProcessor.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/cgvsu/math/Vector3f.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/cgvsu/math/Vector3f.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/cgvsu/render_scene/Camera.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/cgvsu/render_scene/Camera.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/cgvsu/render_scene/GraphicConveyor.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/cgvsu/render_scene/RenderEngine.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/cgvsu/render_scene/RenderEngine.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -68,7 +72,14 @@
       <option name="project" value="LOCAL" />
       <updated>1703614061448</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="add actions with vectors: sum, path from two points, etc">
+      <created>1703614597029</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1703614597029</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -84,6 +95,7 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="3f, 2f add" />
-    <option name="LAST_COMMIT_MESSAGE" value="3f, 2f add" />
+    <MESSAGE value="add actions with vectors: sum, path from two points, etc" />
+    <option name="LAST_COMMIT_MESSAGE" value="add actions with vectors: sum, path from two points, etc" />
   </component>
 </project>
\ No newline at end of file
